import json
import platform
import time
import uuid

from ai.pyChatGPT import ChatGPT
# from pyChatGPT import ChatGPT
from ai.status import WorkingStatus, WorkingType
from ai.aibase import AiBase


class ChatAI(AiBase):
    def __init__(self, user, pwd, proxy, session_token):
        print("browsers", user)
        super().__init__()
        self.type = WorkingType.Browsers
        self.password = pwd
        self.user = user
        self.proxy = proxy
        self.session_token = session_token
        # linux
        if platform.system() == 'Linux':
            print('当前操作系统是 Linux')
            if self.session_token != "" and self.session_token is not None:
                self.api = ChatGPT(session_token=self.session_token, proxy=self.proxy,
                                   chrome_args=['--no-sandbox', '--headless', '--disable-dev-shm-usage',
                                                '--disable-gpu'])
            else:
                self.api = ChatGPT(auth_type="openai", email=self.user, password=self.password, proxy=self.proxy,
                                   chrome_args=['--no-sandbox', '--headless', '--disable-dev-shm-usage',
                                                '--disable-gpu'])
        elif platform.system() == 'Windows':
            print('当前操作系统是 Windows')
            if self.session_token != "" and self.session_token is not None:
                self.api = ChatGPT(session_token=self.session_token, proxy=self.proxy,
                                   chrome_args=['--no-sandbox', '--disable-dev-shm-usage', '--disable-gpu'])
            else:
                self.api = ChatGPT(auth_type="openai", email=self.user, password=self.password, proxy=self.proxy,
                                   chrome_args=['--no-sandbox', '--disable-dev-shm-usage', '--disable-gpu'])
        self.api.reset_conversation()
        self.user = user
        self.password = pwd
        self.api.clear_conversations()  # clear all conversations
        self.api.reset_conversation()  # reset the conversation
        self.api.refresh_chat_page()  # refresh the chat page
        # print(self.api.__session_token)
        # auth with openai login (manual captcha solving)
        # api = ChatGPT(
        #     auth_type='openai', captcha_solver=None,
        #     email='lzy575566430@gmail.com', password='lizhiyong575566'
        # )
        # auth with openai login (2captcha for captcha solving)
        # api = ChatGPT(
        #     auth_type='openai', captcha_solver='2captcha', solver_apikey='abc',
        #     email='example@gmail.com', password='password'
        # )
        # reuse cookies generated by successful login before login,
        # if `login_cookies_path` does not exist, it will process logining  with `auth_type`, and save cookies to `login_cookies_path`
        # only works when `auth_type` is `openai` or `google`
        # api = ChatGPT(auth_type='openai', email='example@xxx.com', password='password',
        #               login_cookies_path='your_cookies_path',
        #               )


    def send(self, msg):
        super().send(msg=msg)
        print("浏览器工作了")
        self.status = WorkingStatus.Busy
        try:
            resp = self.api.send_message(msg)
            if "conversation_id" in resp.keys():
                return {'id': resp['conversation_id'], "message": resp['message']}
            else:
                return {'id': uuid.uuid4(), "message": resp['message']}
        except:
            self.api.refresh_chat_page()
            resp = self.api.send_message(msg)
            if "conversation_id" in resp.keys():
                return {'id': resp['conversation_id'], "message": resp['message']}
            else:
                return {'id': uuid.uuid4(), "message": resp['message']}
        finally:
            self.status = WorkingStatus.Idle

    def send2(self, msg):
        result = []
        self.status = WorkingStatus.Busy
        try:
            for i in msg:
                resp = self.api.send_message(i)
                time.sleep(2)
                result.append(str(resp['message']))
        except:
            self.api.refresh_chat_page()
            result.clear()
            for i in msg:
                resp = self.api.send_message(i)
                time.sleep(2)
                result.append(str(resp['message']))
        finally:
            self.status = WorkingStatus.Idle
            return result


def main():
    pass


if __name__ == '__main__':
    main()
